environment:
  TWINE_USERNAME: bmatthieu3
  # Note: TWINE_PASSWORD is set in Appveyor settings
  matrix:
    # Nightly 64-bit MSVC
    - channel: nightly
      target: x86_64-pc-windows-msvc
      CIBW_SKIP: "*win32* cp33-* cp34-* cp35-* cp36-* cp37-*"
      CIBW_BEFORE_BUILD: pip install setuptools-rust
    # Nightly 32-bit MSVC
    - channel: nightly
      target: i686-pc-windows-msvc
      CIBW_SKIP: "*win_amd64* cp33-*"
      CIBW_BEFORE_BUILD: pip install setuptools-rust

# from: https://github.com/starkat99/appveyor-rust/blob/master/appveyor.yml
install:
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init -yv --default-toolchain nightly --default-host %target%
  - set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - rustc -vV
  - cargo -vV
  - pip install cibuildwheel==0.9.1 setuptools_rust

build_script:
  - cibuildwheel --output-dir dist
  # Run some tests
  - python -m pip install pytest cffi
  - Write-Host "$env:Platform"
  - Write-Host $env:Platform
  - ps: |
      if ($env:Platform -Match "x86_64") {
        Write-Host "This is Windows 64 bits"
        call "%VS140COMNTOOLS%\VsDevCmd.bat"
        set VS90COMNTOOLS=%VS140COMNTOOLS%
      } else {
        Write-Host "This is Windows 32 bits"
      }
  - python setup.py build_rust
  - xcopy "build\lib\rust_pypi\*.pyd" rust_pypi /sy
  - python -m pytest -v rust_pypi
  # Upload to PyPI if the tests succeed
  - python -m pip install twine
  - python -m twine upload "dist\\*.whl" --skip-existing

artifacts:
  - path: "dist\\*.whl"
    name: Wheels